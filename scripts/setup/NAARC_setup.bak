#!/bin/bash
# Lightweight script to set up NAARC on ARCHER2 or Anemone (NOC and UoS cluster)
set -e

display_usage() {
   echo
   echo "  Auto-Config: NAARC on ARCHER2 or Anemone"
   echo "  ***************************************"
   echo
   echo "  usage: ${0##*/} -p path_to_install -r path_to_repo -n nemo_version"
   echo "                  -x xios_version -m machine -c compiler -a mpi_build [-d]"
   echo
   echo "  flags:  -p full path to where nemo/xios will be installed"
   echo "          -r full path to where this reposiotry resides"
   echo "          -n NEMO version"
   echo "          -x XIOS version"
   echo "          -m machine name"
   echo "          -c compiler [gnu|cray|ifort]"
   echo "          -a MPI build [mpich|impi]"
   echo "          -d download input data [optional]"
   echo
   exit 1
	}
# check whether user had supplied -h or --help . If yes display usage
	if [[ ( $1 == "--help") ||  $1 == "-h" ]]
	then
		display_usage
		exit 0
	fi

export DIO_TARG=false

while getopts p:r:m:n:x:c:a:d option
  do
  case "${option}"
  in
  p) export WORK_DIR=${OPTARG};;
  r) export REPO_DIR=${OPTARG};;
  m) export HPC_TARG=${OPTARG};;
  n) export NEMO_VER=${OPTARG};;
  x) export XIOS_VER=${OPTARG};;
  c) export COMPILER=${OPTARG};;
  a) export MPI_TARG=${OPTARG};;
  d) export DIO_TARG=true;;
  :) printf "missing argument for -%s\n" "$OPTARG" >&2; display_usage; exit 1;;
 \?) printf "illegal option: -%s\n" "$OPTARG" >&2; display_usage; exit 1;;
  esac
done

# Validate required arguments
        if [[ -z "$WORK_DIR" || -z "$REPO_DIR" || -z "$HPC_TARG" || -z "$NEMO_VER" || -z "$XIOS_VER" || -z "$COMPILER" || -z "$MPI_TARG" ]]
	then
                echo "Missing required arguments."
		display_usage
		exit 0
        fi

if [ ${WORK_DIR:0:1} != "/" ]; then
  echo "WORK_DIR must use full path"
  exit 1
fi

if [ ${REPO_DIR:0:1} != "/" ]; then
  echo "REPO_DIR must use full path"
  exit 1
fi

# Change to some working directory of choice
if [ ! -d "$WORK_DIR" ]; then
  mkdir $WORK_DIR
fi
cd $WORK_DIR

echo "Making sure that the correct modules are loaded"

case "${HPC_TARG}"
  in
  archer2) ENV_FILE=$REPO_DIR/scripts/env/archer2/${COMPILER}-${MPI_TARG}-ucx
           if [ -f "$ENV_FILE" ]; then
             . $REPO_DIR/scripts/env/archer2/${COMPILER}-${MPI_TARG}-ucx
	   else
	     echo "ENV file not recognised"
             echo "For archer2: [ cray || gnu ] && mpich are available"
             exit 1
           fi
           export LD_LIBRARY_PATH=$CRAY_LD_LIBRARY_PATH:$LD_LIBRARY_PATH
           ;;
  anemone) ENV_FILE=$REPO_DIR/scripts/env/anemone/${COMPILER}-${MPI_TARG}
	  if [ -f "$ENV_FILE" ]; then
	    . $REPO_DIR/scripts/env/anemone/${COMPILER}-${MPI_TARG}
	  else
             echo "ENV file not recognised"
             echo "For anemone: ifort && impi are available"
             exit 1
           fi
           ;;
# metO) ENV_FILE=$REPO_DIR/scripts/env/metO/${COMPILER}-${MPI_TARG}-ucx
#          if [ -f "$ENV_FILE" ]; then
#            . $REPO_DIR/scripts/env/metO/${COMPILER}-${MPI_TARG}
#	   else
#            echo "ENV file not recognised"
#            echo "For metO: XX  && YY are available"
#            exit 1
#          fi
#          ;;
  *)       echo "Machine not recognised"
           echo "Machines available: archer2, anemone"
           #echo "Machines available: archer2, anemone, metO"
           exit 1
esac

case "${NEMO_VER}"
  in
  4.2|4.2.2|4.2.3)
           echo "NEMO Version $NEMO_VER will be checked out"
	   ;;
  *)       echo "NEMO Version not recognised"
           echo "Versions available: 4.2.2"
           exit 1
esac

# Checkout the NEMO code from the SVN Paris repository
echo "Checking out NEMO repository"
case "${NEMO_VER}"
  in
    4.2)
           git clone --filter=blob:none --no-checkout --depth 1 --sparse --branch branch_4.2 https://forge.nemo-ocean.eu/nemo/nemo.git nemo
           cd nemo
           git sparse-checkout add /makenemo /mk /src /cfgs/SHARED /cfgs/ref_cfgs.txt /ext
           git checkout
           ;;
  4.2.2|4.2.3)
           git clone --filter=blob:none --no-checkout --depth 1 --sparse --branch $NEMO_VER https://forge.nemo-ocean.eu/nemo/nemo.git nemo
           cd nemo
           git sparse-checkout add /makenemo /mk /src /cfgs/SHARED /cfgs/ref_cfgs.txt /ext
	   git checkout
           ;;
esac

# Now check EXTERNALS revision number before checking out the rest
case "${NEMO_VER}"
  in
  4.2|4.2.?)
      echo "Nothing to do as EXTERNALS are integral to $NEMO_VER"
      ;;
  *)
      for ext_name in mk FCM IOIPSL
        do
        ext=`svn propget svn:externals | grep $ext_name | cut -c2-`
        svn co http://forge.ipsl.jussieu.fr/nemo/svn/$ext
      done
      ext=`svn propget svn:externals | grep makenemo | cut -c2-`
      svn export http://forge.ipsl.jussieu.fr/nemo/svn/$ext
      ;;
esac

# Setup the directory structure
mkdir $WORK_DIR/nemo/cfgs/NAARC
cd $WORK_DIR

# Define the location of where the forcing files are to be downloaded
export DOWNLOAD_DIR="$WORK_DIR/nemo/cfgs/NAARC/EXPREF/"

echo "Checking out xios repository"

#XIOS3/branches/xios-3.0-beta
case "${NEMO_VER}"
  in
  4.2|4.2.?) svn checkout  http://forge.ipsl.jussieu.fr/ioserver/svn/XIOS/trunk@2379 xios
           cd xios
           cp $REPO_DIR/arch/xios/2/* ./arch
           ;;
  *)       svn co http://forge.ipsl.jussieu.fr/ioserver/svn/XIOS/branchs/xios-2.5@1964 xios
           cd xios
           cp $REPO_DIR/arch/xios/2.5/* ./arch
           ;;
esac

echo "Compiling xios"
./make_xios --full --prod --arch ${HPC_TARG}-${COMPILER}-${MPI_TARG} --netcdf_lib netcdf4_par --job 10

# Let's update the path to xios
export XIOS_DIR=$WORK_DIR/xios

[ -f $XIOS_DIR/bin/xios_server.exe ] || exit 1

cd $WORK_DIR/nemo
cp -r $REPO_DIR/arch/nemo/$NEMO_VER arch
# Dirty fix to hard wire path otherwise user will have to set XIOS_DIR in every new shell session
sed -i "s?XXX_XIOS_DIR_XXX?$XIOS_DIR?" ./arch/arch-${HPC_TARG}-${COMPILER}-${MPI_TARG}.fcm

echo 'NAARC OCE ICE' >> $WORK_DIR/nemo/cfgs/work_cfgs.txt

echo "Gathering forcing data"

export CONFIG_DIR=$WORK_DIR/nemo/cfgs/NAARC

cd $CONFIG_DIR

## Download the input data

if "${DIO_TARG}"
then
  wget http://gws-access.ceda.ac.uk/public/jmmp/NAARC/inputs.tar.gz
  wget http://gws-access.ceda.ac.uk/public/jmmp/NAARC/forcing.tar.gz
  tar xvfz inputs.tar.gz
  tar xvfz forcing.tar.gz
else
  case "${HPC_TARG}"
    in
    archer2) ln -s /work/n01/shared/NAARC/$NEMO_VER INPUTS
             ln -s /work/n01/shared/nemo/FORCING/JRA FORCING
             ;;
    anemone) ln -s /dssgfs01/working/jdha/NAARC/$NEMO_VER INPUTS
             ln -s /dssgfs01/working/acc/FORCING FORCING
             ;;
#   metO) ln -s /path/to/inputs/$NEMO_VER INPUTS
#            ln -s /path/to/forcing FORCING
#            ;;
  esac
fi

cp -r $REPO_DIR/EXPREF/$NEMO_VER/ EXPREF
cd $CONFIG_DIR/EXPREF

mkdir meta_out
mkdir RESTARTS
mkdir TRANSPORTS
mkdir OUTPUTS
mkdir OUTPUTS_PROCESSED
mkdir OUTPUTS_ZIP

ln -s $XIOS_DIR/bin/xios_server.exe $CONFIG_DIR/EXPREF/xios_server.exe

# Link some files from INPUTS that are hardwired to be in the experiment directory
#ln -s INPUTS/K1rowdrg_R025_modif_nonpositive.nc K1rowdrg.nc
#ln -s INPUTS/M2rowdrg_R025_modif_nonpositive.nc M2rowdrg.nc
#ln -s INPUTS/mask_itf_ORCA025ext.nc mask_itf.nc
#ln -s INPUTS/bfr_coef.nc .
#ln -s INPUTS/shlat2d.nc .
#case "${NEMO_VER}"
#  in
#  4.2.?)  ln -s INPUTS/zdfiwm_forcing.nc .
#           ;;
#esac

# Copy remaining information
case "${NEMO_VER}"
  in
      *)   cp -r $REPO_DIR/MY_SRC/$NEMO_VER $CONFIG_DIR/MY_SRC
           ;;
esac

cp -r $REPO_DIR/scripts/run/$HPC_TARG/* $CONFIG_DIR/EXPREF
find $REPO_DIR/scripts/run -maxdepth 1 -type f -execdir cp "{}" $CONFIG_DIR/EXPREF ";"

cp $REPO_DIR/CPP/$NEMO_VER/cpp_NAARC.fcm $CONFIG_DIR/
 
# copy CPOM changes for form drag into MY_SRC if 4.2.2

# *********** Commenting out the following as code now in MY_SRC **************
#case "${NEMO_VER}"
#  in
#      4.2.2) cd $CONFIG_DIR/MY_SRC
#             for fname in  icefrm.F90 icedyn_rhg_eap.F90 iceistate.F90 icesbc.F90 iceupdate.F90 icedyn_rhg_evp.F90 ice.F90 icestp.F90 icevar.F90 icewri.F90 icethd_pnd.F90
#             do
#               curl https://forge.nemo-ocean.eu/nemo/nemo/-/raw/338-cpom-developments-for-nemov4-2/src/ICE/$fname -o $fname
#             done
#             curl https://forge.nemo-ocean.eu/nemo/nemo/-/raw/338-cpom-developments-for-nemov4-2/src/OCE/SBC/sbcblk.F90 -o sbcblk.F90
#             ;;
#esac

cd $CONFIG_DIR/EXPREF

# Add ENV into runscipts
case "${HPC_TARG}"
  in
  archer2) sed -i "s?XXX_ENV_XXX?$REPO_DIR/scripts/env/archer2/${COMPILER}-${MPI_TARG}-ucx?" runscript.slurm
           sed -i "s?XXX_ENV_XXX?$REPO_DIR/scripts/env/archer2/${COMPILER}-${MPI_TARG}-ucx?" runzip.slurm
           ;;
  anemone) sed -i "s?XXX_ENV_XXX?$REPO_DIR/scripts/env/anemone/${COMPILER}-${MPI_TARG}?" runscript.slurm
           ;;
# metO)    sed -i "s?XXX_ENV_XXX?$REPO_DIR/scripts/env/metO/${COMPILER}-${MPI_TARG}?" runscript.slurm
#          sed -i "s?XXX_ENV_XXX?$REPO_DIR/scripts/env/metO/${COMPILER}-${MPI_TARG}?" runzip.slurm
#          ;;
  *)       sed -i "s?XXX_ENV_XXX??" runscript.slurm
           sed -i "s?XXX_ENV_XXX??" runscript.mpirun
           ;;
esac

# Issues with the Cray compiler require the addition of ',' to the namelist
# this change shouldn't affect other compilers
for nml in namelist*
do
  sed -i 's/= *.true./=.true.\,/g'   $nml
  sed -i 's/= *.false./=.false.\,/g' $nml
  sed -i 's/= *.FALSE./=.FALSE.\,/g' $nml
  sed -i 's/= *.TRUE./=.TRUE.\,/g'   $nml
  sed -i 's/.,,/.,/g'   $nml
done

cd $WORK_DIR/nemo

echo "Compiling nemo NAARC Config"
./makenemo -m ${HPC_TARG}-${COMPILER}-${MPI_TARG} -r NAARC -j 16

echo
echo "  Auto-Config: NAARC"
echo "  **********************"
echo
echo "  To run the NAARC Configuration:"
echo
echo "  - cp -rP EXPREF EXP_MYRUN "
echo "  - link the correct domain_cfg.nc "
echo "  - update the runscript accordingly "
echo "      (project code, nodes, modules, etc)"
echo

echo "  - submit via the sbatch command"

echo
